swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /transactions:
    get:
      tags:
        - Transactions
      summary: Récupération de toutes les transactions pour le mois en cours
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
        - in: query
          name: date
          description: La date à laquelle les transactions doivent être récupérées (au format yyyy-mm-dd)
          type: string
      responses:
        200:
          description: Les transactions ont été récupérées avec succès
        400:
          description: La date fournie est invalide
        401:
          description: L'utilisateur doit être authentifié pour accéder à cette ressource
        500:
          description: Une erreur s'est produite du côté serveur
    post:
      tags:
        - Transactions
      summary: Ajout d'une nouvelle transaction
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
        - in: body
          name: transaction
          description: La transaction à ajouter
          schema:
            type: object
            properties:
              id:
                type: integer
              date:
                type: string
                format: date
              amount:
                type: number
              description:
                type: string
      responses:
        201:
          description: La transaction a été ajoutée avec succès
        400:
          description: La transaction fournie est invalide
        401:
          description: L'utilisateur doit être authentifié pour accéder à cette ressource
        500:
          description: Une erreur s'est produite du côté serveur
  /transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Récupération des détails d'une transaction spécifique
      parameters:
        - in: path
          name: id
          description: L'identifiant unique de la transaction
          required: true
          type: integer
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
      responses:
        200:
          description: Les détails de la transaction ont été récupérés avec succès
        401:
          description: L'utilisateur doit être authentifié pour accéder à cette ressource
        404:
          description: La transaction demandée n'existe pas
        500:
          description: Une erreur s'est produite du côté serveur
    put:
      tags:
        - Transactions
      summary: Modification d'une transaction existante
      parameters:
        - in: path
          name: id
          description: L'identifiant unique de la transaction
          required: true
          type: integer
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true  
        - in: body
          name: transaction
          description: Les nouvelles informations à mettre à jour pour la transaction
          schema:
            type: object
            properties:
              date:
                type: string
                format: date
              amount:
                type: number
              description:
                type: string
      responses:
        200:
          description: La transaction a été modifiée avec succès
        400:
          description: La transaction fournie est invalide
        401:
          description: L'utilisateur doit être authentifié pour accéder à cette ressource
        404:
          description: La transaction demandée n'existe pas
        500:
          description: Une erreur s'est produite du côté serveur
    delete:
      tags:
        - Transactions
      summary: Suppression d'une transaction existante
      parameters:
        - in: path
          name: id
          description: L'identifiant unique de la transaction
          required: true
          type: integer
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
      responses:
        204:
          description: La transaction a été supprimée avec succès
        401:
          description: L'utilisateur doit être authentifié pour accéder à cette ressource
        404:
          description: La transaction demandée n'existe pas
        500:
          description: Une erreur s'est produite du côté serveur
  securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string